name: 🚀 Deploy REST API website on push

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  be-deploy:
    name: 🎉 Deploy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: 🚚 Get latest code
        uses: actions/checkout@v4

      - name: 🧱 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: 💾 Cache pkg-fetch
        uses: actions/cache@v3
        with:
          path: ~/.pkg-cache
          key: ${{ runner.os }}-pkg-cache-node18

      - name: 📝 Create .env file
        run: |
          touch .env
          echo ENVIRONMENT=staging >> .env
          echo EXPRESS_SERVER_PORT=${{secrets.EXPRESS_SERVER_PORT}} >> .env
          echo SERVER_MONGODB_URI=${{secrets.SERVER_MONGODB_URI}} >> .env
          echo SERVER_MONGODB_USER=${{secrets.SERVER_MONGODB_USER}} >> .env
          echo SERVER_MONGODB_PASSWORD=${{secrets.SERVER_MONGODB_PASSWORD}} >> .env
          echo JWT_SECRET_KEY=${{secrets.JWT_SECRET_KEY}} >> .env
          echo JWT_EXPIRES_IN=${{secrets.JWT_EXPIRES_IN}} >> .env
          echo JWT_EXPIRES_IN_REFRESH=${{secrets.JWT_EXPIRES_IN_REFRESH}} >> .env
          echo DEFAULT_ACCOUNT_FULLNAME=${{secrets.DEFAULT_ACCOUNT_FULLNAME}} >> .env
          echo DEFAULT_ACCOUNT_USERNAME=${{secrets.DEFAULT_ACCOUNT_USERNAME}} >> .env
          echo DEFAULT_ACCOUNT_PASSWORD=${{secrets.DEFAULT_ACCOUNT_PASSWORD}} >> .env

      - name: 📦 Install dependencies
        run: npm install

      - name: 📥 Pre-fetch pkg binary (optional)
        run: |
          echo "Try fetching pkg binary..."
          npx pkg-fetch --target node18-linux-x64 || echo "Skip prefetch if already exists"

      - name: 🔨 Build project
        run: npm run build

      - name: 📩 Copy .env to buildApp
        run: |
          cp .env buildApp/.env
          cp swagger.json buildApp/swagger.json

      - name: 📂 Sync buildApp to FTP server
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: 'ftps'
          port: ${{ secrets.FTP_PORT }}
          local-dir: 'buildApp/'
          server-dir: 'sms/be/'
          exclude: ''
          dangerous-clean-slate: true
      - name: 🖥️ SSH into VM and restart app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.VM_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PATH_TO_BE }}
            APP_PATH="./sms-be"
            APP_NAME="sms-be"
            sudo chmod 755 "$APP_PATH"
            sudo chmod 755 ".env"
            sudo chmod 755 "swagger.json"
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
            [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
            if pm2 describe "$APP_NAME" > /dev/null; then
              echo "🔁 App already running, restarting..."
              pm2 restart "$APP_NAME"
            else
              echo "🚀 App not found, starting new instance..."
              pm2 start "$APP_PATH" --name "$APP_NAME"
            fi